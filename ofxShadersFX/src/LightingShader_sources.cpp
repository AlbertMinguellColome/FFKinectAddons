// The MIT License (MIT)
// Copyright (c) 2016 Alexandre Baron (Scylardor)

// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#include "ofxShadersFX_LightingShader.h"

namespace ofxShadersFX
{
namespace Lighting
{
const char * LightingShader::VERTEX_SHADER_SOURCES_GLSL120[SHADERS_TYPES] = {
    // Gouraud shading Phong vertex shader (no texture)
    "#version 120\n\
    varying vec4 ambientGlobal,diffuse,ambient,specular;vec4 eyeSpaceVertexPos;void directional_light(in int lightIndex,in vec3 normal){vec3 lightDir;float intensity;lightDir=normalize(gl_LightSource[lightIndex].position.xyz);ambient+=gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient;intensity=max(dot(normal,lightDir),0.0);if(intensity>0.0){vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);diffuse+=gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse*intensity;reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular+=pow(max(dot(reflection,eyeVector),0.0),gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;}}void point_light(in int lightIndex,in vec3 normal){vec3 lightDir;float intensity,dist;lightDir=vec3(gl_LightSource[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);float att,dist;dist=length(lightDir);att=1.0/(gl_LightSource[lightIndex].constantAttenuation+gl_LightSource[lightIndex].linearAttenuation*dist+gl_LightSource[lightIndex].quadraticAttenuation*dist*dist);diffuse+=att*gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse*intensity;ambient+=att*gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient;reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular+=att*pow(max(dot(reflection,eyeVector),0.0),gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;}}void spot_light(in int lightIndex,in vec3 normal){vec3 lightDir;float intensity,dist;lightDir=vec3(gl_LightSource[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float spotEffect;spotEffect=dot(normalize(gl_LightSource[lightIndex].spotDirection),normalize(-lightDir));if(spotEffect>gl_LightSource[lightIndex].spotCosCutoff){vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);float att,dist;spotEffect=pow(spotEffect,gl_LightSource[lightIndex].spotExponent);dist=length(lightDir);att=spotEffect/(gl_LightSource[lightIndex].constantAttenuation+gl_LightSource[lightIndex].linearAttenuation*dist+gl_LightSource[lightIndex].quadraticAttenuation*dist*dist);diffuse+=att*gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse*intensity;ambient+=att*gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient;reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular+=att*pow(max(dot(reflection,eyeVector),0.0),gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;}}}void calc_lighting_color(in vec3 normal){for(int i=0;i<8;i++){if(gl_LightSource[i].position.w==0.0){directional_light(i,normal);}else{if(gl_LightSource[i].spotCutoff<=90.0){spot_light(i,normal);}else{point_light(i,normal);}}}}void main(){vec3 vertex_normal;vec4 color;diffuse=vec4(0.0);ambient=vec4(0.0);specular=vec4(0.0);vertex_normal=normalize(gl_NormalMatrix*gl_Normal);eyeSpaceVertexPos=gl_ModelViewMatrix*gl_Vertex;ambientGlobal=gl_LightModel.ambient*gl_FrontMaterial.ambient+gl_FrontMaterial.emission;calc_lighting_color(vertex_normal);gl_Position=ftransform();}",
    // Gouraud shading Phong vertex shader (with texture)
    "#version 120\n\
    varying vec4 ambientGlobal,diffuse,ambient,specular;vec4 eyeSpaceVertexPos;void directional_light(in int lightIndex,in vec3 normal){vec3 lightDir;float intensity;lightDir=normalize(gl_LightSource[lightIndex].position.xyz);ambient+=gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient;intensity=max(dot(normal,lightDir),0.0);if(intensity>0.0){vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);diffuse+=gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse*intensity;reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular+=pow(max(dot(reflection,eyeVector),0.0),gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;}}void point_light(in int lightIndex,in vec3 normal){vec3 lightDir;float intensity,dist;lightDir=vec3(gl_LightSource[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);float att,dist;dist=length(lightDir);att=1.0/(gl_LightSource[lightIndex].constantAttenuation+gl_LightSource[lightIndex].linearAttenuation*dist+gl_LightSource[lightIndex].quadraticAttenuation*dist*dist);diffuse+=att*gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse*intensity;ambient+=att*gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient;reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular+=att*pow(max(dot(reflection,eyeVector),0.0),gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;}}void spot_light(in int lightIndex,in vec3 normal){vec3 lightDir;float intensity,dist;lightDir=vec3(gl_LightSource[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float spotEffect;spotEffect=dot(normalize(gl_LightSource[lightIndex].spotDirection),normalize(-lightDir));if(spotEffect>gl_LightSource[lightIndex].spotCosCutoff){vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);float att,dist;spotEffect=pow(spotEffect,gl_LightSource[lightIndex].spotExponent);dist=length(lightDir);att=spotEffect/(gl_LightSource[lightIndex].constantAttenuation+gl_LightSource[lightIndex].linearAttenuation*dist+gl_LightSource[lightIndex].quadraticAttenuation*dist*dist);diffuse+=att*gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse*intensity;ambient+=att*gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient;reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular+=att*pow(max(dot(reflection,eyeVector),0.0),gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;}}}void calc_lighting_color(in vec3 normal){for(int i=0;i<8;i++){if(gl_LightSource[i].position.w==0.0){directional_light(i,normal);}else{if(gl_LightSource[i].spotCutoff<=90.0){spot_light(i,normal);}else{point_light(i,normal);}}}}void main(){vec3 vertex_normal;vec4 color;diffuse=vec4(0.0);ambient=vec4(0.0);specular=vec4(0.0);vertex_normal=normalize(gl_NormalMatrix*gl_Normal);eyeSpaceVertexPos=gl_ModelViewMatrix*gl_Vertex;ambientGlobal=gl_LightModel.ambient*gl_FrontMaterial.ambient+gl_FrontMaterial.emission;calc_lighting_color(vertex_normal);gl_TexCoord[0]=gl_TextureMatrix[0]*gl_MultiTexCoord0;gl_Position=ftransform();}",
    // Gouraud shading Blinn-Phong vertex shader (no texture)
    "#version 120\n\
    varying vec4 ambientGlobal,diffuse,ambient,specular;vec4 eyeSpaceVertexPos;void directional_light(in int lightIndex,in vec3 normal){vec3 lightDir=normalize(gl_LightSource[lightIndex].position.xyz);ambient+=gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient;float intensity=max(dot(normal,lightDir),0.0);diffuse+=gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse*intensity;if(intensity>0.0){vec3 halfVector_n=normalize(gl_LightSource[lightIndex].halfVector.xyz);float NdotHV=max(dot(normal,halfVector_n),0.0);specular+=pow(NdotHV,gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;}}void point_light(in int lightIndex,in vec3 normal){vec3 lightDir=vec3(gl_LightSource[lightIndex].position-eyeSpaceVertexPos);float intensity,dist;dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float att,NdotHV;vec3 halfVector;att=1.0/(gl_LightSource[lightIndex].constantAttenuation+gl_LightSource[lightIndex].linearAttenuation*dist+gl_LightSource[lightIndex].quadraticAttenuation*dist*dist);diffuse+=att*gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse*intensity;ambient+=att*gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient;halfVector=normalize(lightDir-vec3(eyeSpaceVertexPos));NdotHV=max(dot(normal,halfVector),0.0);specular+=att*pow(NdotHV,gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;}}void spot_light(in int lightIndex,in vec3 normal){vec3 lightDir;float intensity,dist;lightDir=vec3(gl_LightSource[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float spotEffect,att,NdotHV;vec3 halfVector;spotEffect=dot(normalize(gl_LightSource[lightIndex].spotDirection),normalize(-lightDir));if(spotEffect>gl_LightSource[lightIndex].spotCosCutoff){spotEffect=pow(spotEffect,gl_LightSource[lightIndex].spotExponent);att=spotEffect/(gl_LightSource[lightIndex].constantAttenuation+gl_LightSource[lightIndex].linearAttenuation*dist+gl_LightSource[lightIndex].quadraticAttenuation*dist*dist);diffuse+=att*gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse*intensity;ambient+=att*gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient;halfVector=normalize(lightDir-vec3(eyeSpaceVertexPos));NdotHV=max(dot(normal,halfVector),0.0);specular+=att*pow(NdotHV,gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;}}}void calc_lighting_color(in vec3 normal){for(int i=0;i<8;i++){if(gl_LightSource[i].position.w==0.0){directional_light(i,normal);}else{if(gl_LightSource[i].spotCutoff<=90.0){spot_light(i,normal);}else{point_light(i,normal);}}}}void main(){vec3 vertex_normal;vec4 color;diffuse=vec4(0.0);ambient=vec4(0.0);specular=vec4(0.0);vertex_normal=normalize(gl_NormalMatrix*gl_Normal);eyeSpaceVertexPos=gl_ModelViewMatrix*gl_Vertex;ambientGlobal=gl_LightModel.ambient*gl_FrontMaterial.ambient+gl_FrontMaterial.emission;calc_lighting_color(vertex_normal);gl_Position=ftransform();}",
    // Gouraud shading Blinn-Phong vertex shader (with texture)
    "#version 120\n\
    varying vec4 ambientGlobal,diffuse,ambient,specular;vec4 eyeSpaceVertexPos;void directional_light(in int lightIndex,in vec3 normal){vec3 lightDir;float intensity;lightDir=normalize(gl_LightSource[lightIndex].position.xyz);ambient+=gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient;intensity=max(dot(normal,lightDir),0.0);if(intensity>0.0){vec3 halfVector_n=normalize(gl_LightSource[lightIndex].halfVector.xyz);float NdotHV;diffuse+=gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse*intensity;NdotHV=max(dot(normal,halfVector_n),0.0);specular+=pow(NdotHV,gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;}}void point_light(in int lightIndex,in vec3 normal){vec3 lightDir;float intensity,dist;lightDir=vec3(gl_LightSource[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float att,NdotHV;vec3 halfVector;att=1.0/(gl_LightSource[lightIndex].constantAttenuation+gl_LightSource[lightIndex].linearAttenuation*dist+gl_LightSource[lightIndex].quadraticAttenuation*dist*dist);diffuse+=att*gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse*intensity;ambient+=att*gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient;halfVector=normalize(lightDir-vec3(eyeSpaceVertexPos));NdotHV=max(dot(normal,halfVector),0.0);specular+=att*pow(NdotHV,gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;}}void spot_light(in int lightIndex,in vec3 normal){vec3 lightDir;float intensity,dist;lightDir=vec3(gl_LightSource[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float spotEffect,att,NdotHV;vec3 halfVector;spotEffect=dot(normalize(gl_LightSource[lightIndex].spotDirection),normalize(-lightDir));if(spotEffect>gl_LightSource[lightIndex].spotCosCutoff){spotEffect=pow(spotEffect,gl_LightSource[lightIndex].spotExponent);att=spotEffect/(gl_LightSource[lightIndex].constantAttenuation+gl_LightSource[lightIndex].linearAttenuation*dist+gl_LightSource[lightIndex].quadraticAttenuation*dist*dist);diffuse+=att*gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse*intensity;ambient+=att*gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient;halfVector=normalize(lightDir-vec3(eyeSpaceVertexPos));NdotHV=max(dot(normal,halfVector),0.0);specular+=att*pow(NdotHV,gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;}}}void calc_lighting_color(in vec3 normal){for(int i=0;i<8;i++){if(gl_LightSource[i].position.w==0.0){directional_light(i,normal);}else{if(gl_LightSource[i].spotCutoff<=90.0){spot_light(i,normal);}else{point_light(i,normal);}}}}void main(){vec3 vertex_normal;vec4 color;diffuse=vec4(0.0);ambient=vec4(0.0);specular=vec4(0.0);vertex_normal=normalize(gl_NormalMatrix*gl_Normal);eyeSpaceVertexPos=gl_ModelViewMatrix*gl_Vertex;ambientGlobal=gl_LightModel.ambient*gl_FrontMaterial.ambient+gl_FrontMaterial.emission;calc_lighting_color(vertex_normal);gl_TexCoord[0]=gl_TextureMatrix[0]*gl_MultiTexCoord0;gl_Position=ftransform();}",
    // Phong shading Phong vertex shader (no texture)
    "#version 120\n\
    varying vec4 ambientGlobal,eyeSpaceVertexPos;varying vec3 vertex_normal;void main(){vertex_normal=normalize(gl_NormalMatrix*gl_Normal);eyeSpaceVertexPos=gl_ModelViewMatrix*gl_Vertex;ambientGlobal=gl_LightModel.ambient*gl_FrontMaterial.ambient+gl_FrontMaterial.emission;gl_Position=ftransform();}",
    // Phong shading Phong vertex shader (with texture)
    "#version 120\n\
    varying vec4 ambientGlobal,eyeSpaceVertexPos;varying vec3 vertex_normal;void main(){vertex_normal=normalize(gl_NormalMatrix*gl_Normal);eyeSpaceVertexPos=gl_ModelViewMatrix*gl_Vertex;ambientGlobal=gl_LightModel.ambient*gl_FrontMaterial.ambient+gl_FrontMaterial.emission;gl_TexCoord[0]=gl_TextureMatrix[0]*gl_MultiTexCoord0;gl_Position=ftransform();}",
    // Phong shading Blinn-Phong vertex shader (no texture)
    "#version 120\n\
    varying vec4 ambientGlobal,eyeSpaceVertexPos;varying vec3 vertex_normal;void main(){vertex_normal=normalize(gl_NormalMatrix*gl_Normal);eyeSpaceVertexPos=gl_ModelViewMatrix*gl_Vertex;ambientGlobal=gl_LightModel.ambient*gl_FrontMaterial.ambient+gl_FrontMaterial.emission;gl_Position=ftransform();}",
    // Phong shading Blinn-Phong vertex shader (with texture)
    "#version 120\n\
    varying vec4 ambientGlobal,eyeSpaceVertexPos;varying vec3 vertex_normal;void main(){vertex_normal=normalize(gl_NormalMatrix*gl_Normal);eyeSpaceVertexPos=gl_ModelViewMatrix*gl_Vertex;ambientGlobal=gl_LightModel.ambient*gl_FrontMaterial.ambient+gl_FrontMaterial.emission;gl_TexCoord[0]=gl_TextureMatrix[0]*gl_MultiTexCoord0;gl_Position=ftransform();}",
};

const char * LightingShader::VERTEX_SHADER_SOURCES_GLSL330[SHADERS_TYPES] = {
    // Gouraud shading Phong vertex shader (no texture)
    "#version 330\n\
struct Light{vec4 position;vec4 ambient;vec4 diffuse;vec4 specular;float constant_attenuation;float linear_attenuation;float quadratic_attenuation;vec3 spot_direction;float spot_cutoff;float spot_cos_cutoff;float spot_exponent;};uniform Lights{Light light[8];}lights;uniform Material{vec4 ambient;vec4 diffuse;vec4 specular;vec4 emission;float shininess;}material;uniform mat4 modelViewProjectionMatrix;uniform mat4 modelViewMatrix;uniform mat4 normalMatrix;uniform int lightsNumber;in vec4 position;in vec3 normal;out vec4 ambientGlobal,diffuse,ambient,specular;vec4 eyeSpaceVertexPos;void directional_light(in int lightIndex,in vec3 normal,inout vec4 diffuse,inout vec4 ambient,inout vec4 specular){vec3 lightDir;float intensity;lightDir=normalize(lights.light[lightIndex].position.xyz);ambient+=material.ambient*lights.light[lightIndex].ambient;intensity=max(dot(normal,lightDir),0.0);if(intensity>0.0){vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);diffuse+=lights.light[lightIndex].diffuse*material.diffuse*intensity;reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular+=pow(max(dot(reflection,eyeVector),0.0),material.shininess)*material.specular*lights.light[lightIndex].specular;}}void point_light(in int lightIndex,in vec3 normal,inout vec4 diffuse,inout vec4 ambient,inout vec4 specular){vec3 lightDir;float intensity,dist;lightDir=vec3(lights.light[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float att;vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);att=1.0/(lights.light[lightIndex].constant_attenuation+lights.light[lightIndex].linear_attenuation*dist+lights.light[lightIndex].quadratic_attenuation*dist*dist);diffuse+=att*intensity*material.diffuse*lights.light[lightIndex].diffuse;ambient+=att*material.ambient*lights.light[lightIndex].ambient;reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular+=pow(max(dot(reflection,eyeVector),0.0),material.shininess)*material.specular*lights.light[lightIndex].specular;}}void spot_light(in int lightIndex,in vec3 normal,inout vec4 diffuse,inout vec4 ambient,inout vec4 specular){vec3 lightDir;float intensity,dist;lightDir=vec3(lights.light[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float spotEffect,att;vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);spotEffect=dot(normalize(lights.light[lightIndex].spot_direction),normalize(-lightDir));if(spotEffect>lights.light[lightIndex].spot_cos_cutoff){spotEffect=pow(spotEffect,lights.light[lightIndex].spot_exponent);att=spotEffect/(lights.light[lightIndex].constant_attenuation+lights.light[lightIndex].linear_attenuation*dist+lights.light[lightIndex].quadratic_attenuation*dist*dist);diffuse+=att*intensity*material.diffuse*lights.light[lightIndex].diffuse;ambient+=att*material.ambient*lights.light[lightIndex].ambient;reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular+=att*pow(max(dot(reflection,eyeVector),0.0),material.shininess)*material.specular*lights.light[lightIndex].specular;}}}vec4 calc_lighting_color(in vec3 normal,inout vec4 diffuse,inout vec4 ambient,inout vec4 specular){vec4 lightingColor=vec4(0.0);for(int i=0;i<lightsNumber;i++){if(lights.light[i].position.w==0.0){directional_light(i,normal,diffuse,ambient,specular);}else{if(lights.light[i].spot_cutoff<=90.0){spot_light(i,normal,diffuse,ambient,specular);}else{point_light(i,normal,diffuse,ambient,specular);}}}return lightingColor;}void main(){vec3 vertex_normal;diffuse=vec4(0.0);ambient=vec4(0.0);specular=vec4(0.0);ambientGlobal=material.emission;eyeSpaceVertexPos=modelViewMatrix*position;vertex_normal=normalize((normalMatrix*vec4(normal,0.0)).xyz);calc_lighting_color(vertex_normal,diffuse,ambient,specular);gl_Position=modelViewProjectionMatrix*position;}",
    // Gouraud shading Phong vertex shader (with texture)
    "#version 330\n\
struct Light{vec4 position;vec4 ambient;vec4 diffuse;vec4 specular;float constant_attenuation;float linear_attenuation;float quadratic_attenuation;vec3 spot_direction;float spot_cutoff;float spot_cos_cutoff;float spot_exponent;};uniform Lights{Light light[8];}lights;uniform Material{vec4 ambient;vec4 diffuse;vec4 specular;vec4 emission;float shininess;}material;uniform mat4 modelViewProjectionMatrix;uniform mat4 modelViewMatrix;uniform mat4 normalMatrix;uniform int lightsNumber;in vec4 position;in vec3 normal;in vec2 texcoord;out vec4 ambientGlobal,diffuse,ambient,specular;out vec2 varyingtexcoord;vec4 eyeSpaceVertexPos;void directional_light(in int lightIndex,in vec3 normal,inout vec4 diffuse,inout vec4 ambient,inout vec4 specular){vec3 lightDir;float intensity;lightDir=normalize(lights.light[lightIndex].position.xyz);ambient+=material.ambient*lights.light[lightIndex].ambient;intensity=max(dot(normal,lightDir),0.0);if(intensity>0.0){vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);diffuse+=lights.light[lightIndex].diffuse*material.diffuse*intensity;reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular+=pow(max(dot(reflection,eyeVector),0.0),material.shininess)*material.specular*lights.light[lightIndex].specular;}}void point_light(in int lightIndex,in vec3 normal,inout vec4 diffuse,inout vec4 ambient,inout vec4 specular){vec3 lightDir;float intensity,dist;lightDir=vec3(lights.light[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float att;vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);att=1.0/(lights.light[lightIndex].constant_attenuation+lights.light[lightIndex].linear_attenuation*dist+lights.light[lightIndex].quadratic_attenuation*dist*dist);diffuse+=att*intensity*material.diffuse*lights.light[lightIndex].diffuse;ambient+=att*material.ambient*lights.light[lightIndex].ambient;reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular+=pow(max(dot(reflection,eyeVector),0.0),material.shininess)*material.specular*lights.light[lightIndex].specular;}}void spot_light(in int lightIndex,in vec3 normal,inout vec4 diffuse,inout vec4 ambient,inout vec4 specular){vec3 lightDir;float intensity,dist;lightDir=vec3(lights.light[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float spotEffect,att;vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);spotEffect=dot(normalize(lights.light[lightIndex].spot_direction),normalize(-lightDir));if(spotEffect>lights.light[lightIndex].spot_cos_cutoff){spotEffect=pow(spotEffect,lights.light[lightIndex].spot_exponent);att=spotEffect/(lights.light[lightIndex].constant_attenuation+lights.light[lightIndex].linear_attenuation*dist+lights.light[lightIndex].quadratic_attenuation*dist*dist);diffuse+=att*intensity*material.diffuse*lights.light[lightIndex].diffuse;ambient+=att*material.ambient*lights.light[lightIndex].ambient;reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular+=att*pow(max(dot(reflection,eyeVector),0.0),material.shininess)*material.specular*lights.light[lightIndex].specular;}}}vec4 calc_lighting_color(in vec3 normal,inout vec4 diffuse,inout vec4 ambient,inout vec4 specular){vec4 lightingColor=vec4(0.0);for(int i=0;i<lightsNumber;i++){if(lights.light[i].position.w==0.0){directional_light(i,normal,diffuse,ambient,specular);}else{if(lights.light[i].spot_cutoff<=90.0){spot_light(i,normal,diffuse,ambient,specular);}else{point_light(i,normal,diffuse,ambient,specular);}}}return lightingColor;}void main(){vec3 vertex_normal;diffuse=vec4(0.0);ambient=vec4(0.0);specular=vec4(0.0);ambientGlobal=material.emission;eyeSpaceVertexPos=modelViewMatrix*position;vertex_normal=normalize((normalMatrix*vec4(normal,0.0)).xyz);calc_lighting_color(vertex_normal,diffuse,ambient,specular);varyingtexcoord=vec2(texcoord.x,texcoord.y);gl_Position=modelViewProjectionMatrix*position;}",
    // Gouraud shading Blinn-Phong vertex shader (no texture)
    "#version 330\n\
struct Light{vec4 position;vec4 ambient;vec4 diffuse;vec4 specular;float constant_attenuation;float linear_attenuation;float quadratic_attenuation;vec3 spot_direction;float spot_cutoff;float spot_cos_cutoff;float spot_exponent;};uniform Lights{Light light[8];}lights;uniform Material{vec4 ambient;vec4 diffuse;vec4 specular;vec4 emission;float shininess;}material;uniform mat4 modelViewProjectionMatrix;uniform mat4 modelViewMatrix;uniform mat4 normalMatrix;uniform int lightsNumber;in vec4 position;in vec3 normal;out vec4 ambientGlobal,diffuse,ambient,specular;vec4 eyeSpaceVertexPos;void directional_light(in int lightIndex,in vec3 normal,inout vec4 diffuse,inout vec4 ambient,inout vec4 specular){vec3 eyeVector,lightDir;float intensity;eyeVector=vec3(-eyeSpaceVertexPos);lightDir=normalize(lights.light[lightIndex].position.xyz);ambient+=material.ambient*lights.light[lightIndex].ambient;intensity=max(dot(normal,lightDir),0.0);if(intensity>0.0){vec3 halfVector;float NdotHV;diffuse+=lights.light[lightIndex].diffuse*material.diffuse*intensity;halfVector=normalize(lightDir+eyeVector);NdotHV=max(dot(normal,halfVector),0.0);specular+=pow(NdotHV,material.shininess)*material.specular*lights.light[lightIndex].specular;}}void point_light(in int lightIndex,in vec3 normal,inout vec4 diffuse,inout vec4 ambient,inout vec4 specular){vec3 lightDir;float intensity,dist;lightDir=vec3(lights.light[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float att,NdotHV;vec3 halfVector;att=1.0/(lights.light[lightIndex].constant_attenuation+lights.light[lightIndex].linear_attenuation*dist+lights.light[lightIndex].quadratic_attenuation*dist*dist);diffuse+=att*(material.diffuse*lights.light[lightIndex].diffuse*intensity);ambient+=att*(material.ambient*lights.light[lightIndex].ambient);halfVector=normalize(lightDir-vec3(eyeSpaceVertexPos));NdotHV=max(dot(normal,halfVector),0.0);specular+=att*pow(NdotHV,material.shininess)*material.specular*lights.light[lightIndex].specular;}}void spot_light(in int lightIndex,in vec3 normal,inout vec4 diffuse,inout vec4 ambient,inout vec4 specular){vec3 lightDir;float intensity,dist;lightDir=vec3(lights.light[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float spotEffect,att,NdotHV;vec3 halfVector;spotEffect=dot(normalize(lights.light[lightIndex].spot_direction),normalize(-lightDir));if(spotEffect>lights.light[lightIndex].spot_cos_cutoff){spotEffect=pow(spotEffect,lights.light[lightIndex].spot_exponent);att=spotEffect/(lights.light[lightIndex].constant_attenuation+lights.light[lightIndex].linear_attenuation*dist+lights.light[lightIndex].quadratic_attenuation*dist*dist);diffuse+=att*material.diffuse*lights.light[lightIndex].diffuse*intensity;ambient+=att*material.ambient*lights.light[lightIndex].ambient;halfVector=normalize(lightDir-vec3(eyeSpaceVertexPos));NdotHV=max(dot(normal,halfVector),0.0);specular+=att*pow(NdotHV,material.shininess)*material.specular*lights.light[lightIndex].specular;}}}vec4 calc_lighting_color(in vec3 normal,inout vec4 diffuse,inout vec4 ambient,inout vec4 specular){vec4 lightingColor=vec4(0.0);for(int i=0;i<lightsNumber;i++){if(lights.light[i].position.w==0.0){directional_light(i,normal,diffuse,ambient,specular);}else{if(lights.light[i].spot_cutoff<=90.0){spot_light(i,normal,diffuse,ambient,specular);}else{point_light(i,normal,diffuse,ambient,specular);}}}return lightingColor;}void main(){vec3 vertex_normal;diffuse=vec4(0.0);ambient=vec4(0.0);specular=vec4(0.0);ambientGlobal=material.emission;eyeSpaceVertexPos=modelViewMatrix*position;vertex_normal=normalize((normalMatrix*vec4(normal,0.0)).xyz);calc_lighting_color(vertex_normal,diffuse,ambient,specular);gl_Position=modelViewProjectionMatrix*position;}",
    // Gouraud shading Blinn-Phong vertex shader (with texture)
    "#version 330\n\
struct Light{vec4 position;vec4 ambient;vec4 diffuse;vec4 specular;float constant_attenuation;float linear_attenuation;float quadratic_attenuation;vec3 spot_direction;float spot_cutoff;float spot_cos_cutoff;float spot_exponent;};uniform Lights{Light light[8];}lights;uniform Material{vec4 ambient;vec4 diffuse;vec4 specular;vec4 emission;float shininess;}material;uniform mat4 modelViewProjectionMatrix;uniform mat4 modelViewMatrix;uniform mat4 normalMatrix;uniform int lightsNumber;in vec4 position;in vec3 normal;in vec2 texcoord;out vec4 ambientGlobal,diffuse,ambient,specular;out vec2 varyingtexcoord;vec4 eyeSpaceVertexPos;void directional_light(in int lightIndex,in vec3 normal,inout vec4 diffuse,inout vec4 ambient,inout vec4 specular){vec3 eyeVector,lightDir;float intensity;eyeVector=vec3(-eyeSpaceVertexPos);lightDir=normalize(lights.light[lightIndex].position.xyz);ambient+=material.ambient*lights.light[lightIndex].ambient;intensity=max(dot(normal,lightDir),0.0);if(intensity>0.0){vec3 halfVector;float NdotHV;diffuse+=lights.light[lightIndex].diffuse*material.diffuse*intensity;halfVector=normalize(lightDir+eyeVector);NdotHV=max(dot(normal,halfVector),0.0);specular+=pow(NdotHV,material.shininess)*material.specular*lights.light[lightIndex].specular;}}void point_light(in int lightIndex,in vec3 normal,inout vec4 diffuse,inout vec4 ambient,inout vec4 specular){vec3 lightDir;float intensity,dist;lightDir=vec3(lights.light[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float att,NdotHV;vec3 halfVector;att=1.0/(lights.light[lightIndex].constant_attenuation+lights.light[lightIndex].linear_attenuation*dist+lights.light[lightIndex].quadratic_attenuation*dist*dist);diffuse+=att*(material.diffuse*lights.light[lightIndex].diffuse*intensity);ambient+=att*(material.ambient*lights.light[lightIndex].ambient);halfVector=normalize(lightDir-vec3(eyeSpaceVertexPos));NdotHV=max(dot(normal,halfVector),0.0);specular+=att*pow(NdotHV,material.shininess)*material.specular*lights.light[lightIndex].specular;}}void spot_light(in int lightIndex,in vec3 normal,inout vec4 diffuse,inout vec4 ambient,inout vec4 specular){vec3 lightDir;float intensity,dist;lightDir=vec3(lights.light[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float spotEffect,att,NdotHV;vec3 halfVector;spotEffect=dot(normalize(lights.light[lightIndex].spot_direction),normalize(-lightDir));if(spotEffect>lights.light[lightIndex].spot_cos_cutoff){spotEffect=pow(spotEffect,lights.light[lightIndex].spot_exponent);att=spotEffect/(lights.light[lightIndex].constant_attenuation+lights.light[lightIndex].linear_attenuation*dist+lights.light[lightIndex].quadratic_attenuation*dist*dist);diffuse+=att*material.diffuse*lights.light[lightIndex].diffuse*intensity;ambient+=att*material.ambient*lights.light[lightIndex].ambient;halfVector=normalize(lightDir-vec3(eyeSpaceVertexPos));NdotHV=max(dot(normal,halfVector),0.0);specular+=att*pow(NdotHV,material.shininess)*material.specular*lights.light[lightIndex].specular;}}}vec4 calc_lighting_color(in vec3 normal,inout vec4 diffuse,inout vec4 ambient,inout vec4 specular){vec4 lightingColor=vec4(0.0);for(int i=0;i<lightsNumber;i++){if(lights.light[i].position.w==0.0){directional_light(i,normal,diffuse,ambient,specular);}else{if(lights.light[i].spot_cutoff<=90.0){spot_light(i,normal,diffuse,ambient,specular);}else{point_light(i,normal,diffuse,ambient,specular);}}}return lightingColor;}void main(){vec3 vertex_normal;diffuse=vec4(0.0);ambient=vec4(0.0);specular=vec4(0.0);ambientGlobal=material.emission;eyeSpaceVertexPos=modelViewMatrix*position;vertex_normal=normalize((normalMatrix*vec4(normal,0.0)).xyz);calc_lighting_color(vertex_normal,diffuse,ambient,specular);varyingtexcoord=vec2(texcoord.x,texcoord.y);gl_Position=modelViewProjectionMatrix*position;}",
    // Phong shading Phong vertex shader (no texture)
    "#version 330\n\
struct Light{vec4 position;vec4 ambient;vec4 diffuse;vec4 specular;float constant_attenuation;float linear_attenuation;float quadratic_attenuation;vec3 spot_direction;float spot_cutoff;float spot_cos_cutoff;float spot_exponent;};uniform Lights{Light light[8];}lights;uniform Material{vec4 ambient;vec4 diffuse;vec4 specular;vec4 emission;float shininess;}material;uniform mat4 modelViewProjectionMatrix;uniform mat4 modelViewMatrix;uniform mat4 normalMatrix;in vec4 position;in vec3 normal;out vec4 eyeSpaceVertexPos,ambientGlobal;out vec3 vertex_normal;void main(){ambientGlobal=material.emission;eyeSpaceVertexPos=modelViewMatrix*position;vertex_normal=normalize((normalMatrix*vec4(normal,0.0)).xyz);gl_Position=modelViewProjectionMatrix*position;}",
    // Phong shading Phong vertex shader (with texture)
    "#version 330\n\
struct Light{vec4 position;vec4 ambient;vec4 diffuse;vec4 specular;float constant_attenuation;float linear_attenuation;float quadratic_attenuation;vec3 spot_direction;float spot_cutoff;float spot_cos_cutoff;float spot_exponent;};uniform Lights{Light light[8];}lights;uniform Material{vec4 ambient;vec4 diffuse;vec4 specular;vec4 emission;float shininess;}material;uniform mat4 modelViewProjectionMatrix;uniform mat4 modelViewMatrix;uniform mat4 normalMatrix;in vec4 position;in vec3 normal;in vec2 texcoord;out vec4 eyeSpaceVertexPos,ambientGlobal;out vec3 vertex_normal;out vec2 varyingtexcoord;void main(){ambientGlobal=material.emission;eyeSpaceVertexPos=modelViewMatrix*position;vertex_normal=normalize((normalMatrix*vec4(normal,0.0)).xyz);varyingtexcoord=vec2(texcoord.x,texcoord.y);gl_Position=modelViewProjectionMatrix*position;}",
    // Phong shading Blinn-Phong vertex shader (no texture)
    "#version 330\n\
struct Light{vec4 position;vec4 ambient;vec4 diffuse;vec4 specular;float constant_attenuation;float linear_attenuation;float quadratic_attenuation;vec3 spot_direction;float spot_cutoff;float spot_cos_cutoff;float spot_exponent;};uniform Lights{Light light[8];}lights;uniform Material{vec4 ambient;vec4 diffuse;vec4 specular;vec4 emission;float shininess;}material;uniform mat4 modelViewProjectionMatrix;uniform mat4 modelViewMatrix;uniform mat4 normalMatrix;in vec4 position;in vec3 normal;out vec4 eyeSpaceVertexPos,ambientGlobal;out vec3 vertex_normal,interp_eyePos;void main(){ambientGlobal=material.emission;eyeSpaceVertexPos=modelViewMatrix*position;vertex_normal=normalize((normalMatrix*vec4(normal,0.0)).xyz);interp_eyePos=vec3(-eyeSpaceVertexPos);gl_Position=modelViewProjectionMatrix*position;}",
    // Phong shading Blinn-Phong vertex shader (with texture)
    "#version 330\n\
struct Light{vec4 position;vec4 ambient;vec4 diffuse;vec4 specular;float constant_attenuation;float linear_attenuation;float quadratic_attenuation;vec3 spot_direction;float spot_cutoff;float spot_cos_cutoff;float spot_exponent;};uniform Lights{Light light[8];}lights;uniform Material{vec4 ambient;vec4 diffuse;vec4 specular;vec4 emission;float shininess;}material;uniform mat4 modelViewProjectionMatrix;uniform mat4 modelViewMatrix;uniform mat4 normalMatrix;in vec4 position;in vec3 normal;in vec2 texcoord;out vec4 eyeSpaceVertexPos,ambientGlobal;out vec3 vertex_normal,interp_eyePos;out vec2 varyingtexcoord;void main(){ambientGlobal=material.emission;eyeSpaceVertexPos=modelViewMatrix*position;vertex_normal=normalize((normalMatrix*vec4(normal,0.0)).xyz);interp_eyePos=vec3(-eyeSpaceVertexPos);varyingtexcoord=vec2(texcoord.x,texcoord.y);gl_Position=modelViewProjectionMatrix*position;}"

};

const char * LightingShader::FRAGMENT_SHADER_SOURCES_GLSL120[SHADERS_TYPES] = {
    // Gouraud shading Phong pixel shader (no texture)
    "#version 120\n\
    varying vec4 ambientGlobal,diffuse,ambient,specular;void main(void){gl_FragColor=(ambientGlobal+diffuse+ambient)+specular;}",
    // Gouraud shading Phong pixel shader (with texture)
    "#version 120\n\
    #extension GL_ARB_texture_rectangle : enable\n\
    uniform sampler2DRect tex;varying vec4 ambientGlobal,diffuse,ambient,specular;void main(void){gl_FragColor=(texture2DRect(tex,gl_TexCoord[0].st)*(ambientGlobal+diffuse+ambient))+specular;}",
    // Gouraud shading Blinn-Phong pixel shader (no texture)
    "#version 120\n\
    varying vec4 ambientGlobal,diffuse,ambient,specular;void main(void){gl_FragColor=(ambientGlobal+diffuse+ambient)+specular;}",
    // Gouraud shading Blinn-Phong pixel shader (with texture)
    "#version 120\n\
    #extension GL_ARB_texture_rectangle : enable\n\
    uniform sampler2DRect tex;varying vec4 ambientGlobal,diffuse,ambient,specular;void main(void){gl_FragColor=(texture2DRect(tex,gl_TexCoord[0].st)*(ambientGlobal+diffuse+ambient))+specular;}",
    // Phong shading Phong pixel shader (no texture)
    "#version 120\n\
    varying vec4 ambientGlobal,eyeSpaceVertexPos;varying vec3 vertex_normal;vec4 directional_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 dirLightColor,diffuse,specular,ambient=vec4(0.0);float intensity;lightDir=normalize(gl_LightSource[lightIndex].position.xyz);ambient=gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient;dirLightColor=ambient;intensity=max(dot(normal,lightDir),0.0);if(intensity>0.0){vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);diffuse=gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse;dirLightColor+=diffuse*intensity;reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular=pow(max(dot(reflection,eyeVector),0.0),gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;dirLightColor+=specular;}return dirLightColor;}vec4 point_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 pointLightColor,diffuse,specular,ambient=vec4(0.0);float intensity,dist;pointLightColor=vec4(0.0);lightDir=vec3(gl_LightSource[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);float att,dist;dist=length(lightDir);att=1.0/(gl_LightSource[lightIndex].constantAttenuation+gl_LightSource[lightIndex].linearAttenuation*dist+gl_LightSource[lightIndex].quadraticAttenuation*dist*dist);diffuse=gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse;ambient=gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient;pointLightColor+=att*(diffuse*intensity+ambient);reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular=pow(max(dot(reflection,eyeVector),0.0),gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;pointLightColor+=att*specular;}return pointLightColor;}vec4 spot_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 spotLightColor,diffuse,specular,ambient=vec4(0.0);float intensity,dist;spotLightColor=vec4(0.0);lightDir=vec3(gl_LightSource[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float spotEffect;spotEffect=dot(normalize(gl_LightSource[lightIndex].spotDirection),normalize(-lightDir));if(spotEffect>gl_LightSource[lightIndex].spotCosCutoff){vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);float att,dist;spotEffect=pow(spotEffect,gl_LightSource[lightIndex].spotExponent);dist=length(lightDir);att=spotEffect/(gl_LightSource[lightIndex].constantAttenuation+gl_LightSource[lightIndex].linearAttenuation*dist+gl_LightSource[lightIndex].quadraticAttenuation*dist*dist);diffuse=gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse;ambient=gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient;spotLightColor+=att*(diffuse*intensity+ambient);reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular=pow(max(dot(reflection,eyeVector),0.0),gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;spotLightColor+=att*specular;}}return spotLightColor;}vec4 calc_lighting_color(in vec3 normal){vec4 lightingColor=vec4(0.0);for(int i=0;i<8;i++){if(gl_LightSource[i].position.w==0.0){lightingColor+=directional_light(i,normal);}else{if(gl_LightSource[i].spotCutoff<=90.0){lightingColor+=spot_light(i,normal);}else{lightingColor+=point_light(i,normal);}}}return lightingColor;}void main(){vec3 n;vec4 color=ambientGlobal;n=normalize(vertex_normal);color+=calc_lighting_color(n);color.w=1.0;gl_FragColor=color;}",
    // Phong shading Phong pixel shader (with texture)
    "#version 120\n\
    #extension GL_ARB_texture_rectangle : enable\n\
    uniform sampler2DRect tex;varying vec4 ambientGlobal,eyeSpaceVertexPos;varying vec3 vertex_normal;vec4 directional_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 dirLightColor,diffuse,specular,ambient=vec4(0.0);float intensity;lightDir=normalize(gl_LightSource[lightIndex].position.xyz);ambient=gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient*texture2DRect(tex,gl_TexCoord[0].st);dirLightColor=ambient;intensity=max(dot(normal,lightDir),0.0);if(intensity>0.0){vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);diffuse=gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse*texture2DRect(tex,gl_TexCoord[0].st);dirLightColor+=diffuse*intensity;reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular=pow(max(dot(reflection,eyeVector),0.0),gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;dirLightColor+=specular;}return dirLightColor;}vec4 point_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 pointLightColor,diffuse,specular,ambient=vec4(0.0);float intensity,dist;pointLightColor=vec4(0.0);lightDir=vec3(gl_LightSource[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);float att,dist;dist=length(lightDir);att=1.0/(gl_LightSource[lightIndex].constantAttenuation+gl_LightSource[lightIndex].linearAttenuation*dist+gl_LightSource[lightIndex].quadraticAttenuation*dist*dist);diffuse=gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse*texture2DRect(tex,gl_TexCoord[0].st);ambient=gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient*texture2DRect(tex,gl_TexCoord[0].st);pointLightColor+=att*(diffuse*intensity+ambient);reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular=pow(max(dot(reflection,eyeVector),0.0),gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;pointLightColor+=att*specular;}return pointLightColor;}vec4 spot_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 spotLightColor,diffuse,specular,ambient=vec4(0.0);float intensity,dist;spotLightColor=vec4(0.0);lightDir=vec3(gl_LightSource[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float spotEffect;spotEffect=dot(normalize(gl_LightSource[lightIndex].spotDirection),normalize(-lightDir));if(spotEffect>gl_LightSource[lightIndex].spotCosCutoff){vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);float att,dist;spotEffect=pow(spotEffect,gl_LightSource[lightIndex].spotExponent);dist=length(lightDir);att=spotEffect/(gl_LightSource[lightIndex].constantAttenuation+gl_LightSource[lightIndex].linearAttenuation*dist+gl_LightSource[lightIndex].quadraticAttenuation*dist*dist);diffuse=gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse*texture2DRect(tex,gl_TexCoord[0].st);ambient=gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient*texture2DRect(tex,gl_TexCoord[0].st);spotLightColor+=att*(diffuse*intensity+ambient);reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular=pow(max(dot(reflection,eyeVector),0.0),gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;spotLightColor+=att*specular;}}return spotLightColor;}vec4 calc_lighting_color(in vec3 normal){vec4 lightingColor=vec4(0.0);for(int i=0;i<8;i++){if(gl_LightSource[i].position.w==0.0){lightingColor+=directional_light(i,normal);}else{if(gl_LightSource[i].spotCutoff<=90.0){lightingColor+=spot_light(i,normal);}else{lightingColor+=point_light(i,normal);}}}return lightingColor;}void main(){vec3 n;vec4 color=ambientGlobal;n=normalize(vertex_normal);color+=calc_lighting_color(n);color.w=1.0;gl_FragColor=color;}",
    // Phong shading Blinn-Phong pixel shader (no texture)
    "#version 120\n\
    varying vec4 ambientGlobal,eyeSpaceVertexPos;varying vec3 vertex_normal;vec4 directional_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 dirLightColor,diffuse,specular,ambient=vec4(0.0);float intensity;lightDir=normalize(gl_LightSource[lightIndex].position.xyz);ambient=gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient;dirLightColor=ambient;intensity=max(dot(normal,lightDir),0.0);if(intensity>0.0){vec3 halfVector_n=normalize(gl_LightSource[lightIndex].halfVector.xyz);float NdotHV;diffuse=gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse;dirLightColor+=diffuse*intensity;NdotHV=max(dot(normal,halfVector_n),0.0);specular=pow(NdotHV,gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;dirLightColor+=specular;}return dirLightColor;}vec4 point_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 pointLightColor;float intensity,dist;pointLightColor=vec4(0.0);lightDir=vec3(gl_LightSource[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float att,NdotHV;vec4 diffuse,specular,ambient=vec4(0.0);vec3 halfVector;att=1.0/(gl_LightSource[lightIndex].constantAttenuation+gl_LightSource[lightIndex].linearAttenuation*dist+gl_LightSource[lightIndex].quadraticAttenuation*dist*dist);diffuse=gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse;ambient=gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient;pointLightColor+=att*(diffuse*intensity+ambient);halfVector=normalize(lightDir-vec3(eyeSpaceVertexPos));NdotHV=max(dot(normal,halfVector),0.0);specular=pow(NdotHV,gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;pointLightColor+=att*specular;}return pointLightColor;}vec4 spot_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 spotLightColor;float intensity,dist;spotLightColor=vec4(0.0);lightDir=vec3(gl_LightSource[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float spotEffect,att,NdotHV;vec4 diffuse,specular,ambient=vec4(0.0);vec3 halfVector;spotEffect=dot(normalize(gl_LightSource[lightIndex].spotDirection),normalize(-lightDir));if(spotEffect>gl_LightSource[lightIndex].spotCosCutoff){spotEffect=pow(spotEffect,gl_LightSource[lightIndex].spotExponent);att=spotEffect/(gl_LightSource[lightIndex].constantAttenuation+gl_LightSource[lightIndex].linearAttenuation*dist+gl_LightSource[lightIndex].quadraticAttenuation*dist*dist);diffuse=gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse;ambient=gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient;spotLightColor+=att*(diffuse*intensity+ambient);halfVector=normalize(lightDir-vec3(eyeSpaceVertexPos));NdotHV=max(dot(normal,halfVector),0.0);specular=pow(NdotHV,gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;spotLightColor+=att*specular;}}return spotLightColor;}vec4 calc_lighting_color(in vec3 normal){vec4 lightingColor=vec4(0.0);for(int i=0;i<8;i++){if(gl_LightSource[i].position.w==0.0){lightingColor+=directional_light(i,normal);}else{if(gl_LightSource[i].spotCutoff<=90.0){lightingColor+=spot_light(i,normal);}else{lightingColor+=point_light(i,normal);}}}return lightingColor;}void main(){vec3 n;vec4 color=ambientGlobal;n=normalize(vertex_normal);color+=calc_lighting_color(n);color.w=1.0;gl_FragColor=color;}",
    // Phong shading Blinn-Phong pixel shader (with texture)
    "#version 120\n\
    #extension GL_ARB_texture_rectangle : enable\n\
    uniform sampler2DRect tex;varying vec4 ambientGlobal,eyeSpaceVertexPos;varying vec3 vertex_normal;vec4 directional_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 dirLightColor,diffuse,specular,ambient=vec4(0.0);float intensity;lightDir=normalize(gl_LightSource[lightIndex].position.xyz);ambient=gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient*texture2DRect(tex,gl_TexCoord[0].st);dirLightColor=ambient;intensity=max(dot(normal,lightDir),0.0);if(intensity>0.0){vec3 halfVector_n=normalize(gl_LightSource[lightIndex].halfVector.xyz);float NdotHV;diffuse=gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse;dirLightColor+=diffuse*intensity*texture2DRect(tex,gl_TexCoord[0].st);NdotHV=max(dot(normal,halfVector_n),0.0);specular=pow(NdotHV,gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;dirLightColor+=specular;}return dirLightColor;}vec4 point_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 pointLightColor;float intensity,dist;pointLightColor=vec4(0.0);lightDir=vec3(gl_LightSource[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float att,NdotHV;vec4 diffuse,specular,ambient=vec4(0.0);vec3 halfVector;att=1.0/(gl_LightSource[lightIndex].constantAttenuation+gl_LightSource[lightIndex].linearAttenuation*dist+gl_LightSource[lightIndex].quadraticAttenuation*dist*dist);diffuse=gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse*texture2DRect(tex,gl_TexCoord[0].st);ambient=gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient*texture2DRect(tex,gl_TexCoord[0].st);pointLightColor+=att*(diffuse*intensity+ambient);halfVector=normalize(lightDir-vec3(eyeSpaceVertexPos));NdotHV=max(dot(normal,halfVector),0.0);specular=pow(NdotHV,gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;pointLightColor+=att*specular;}return pointLightColor;}vec4 spot_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 spotLightColor;float intensity,dist;spotLightColor=vec4(0.0);lightDir=vec3(gl_LightSource[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float spotEffect,att,NdotHV;vec4 diffuse,specular,ambient=vec4(0.0);vec3 halfVector;spotEffect=dot(normalize(gl_LightSource[lightIndex].spotDirection),normalize(-lightDir));if(spotEffect>gl_LightSource[lightIndex].spotCosCutoff){spotEffect=pow(spotEffect,gl_LightSource[lightIndex].spotExponent);att=spotEffect/(gl_LightSource[lightIndex].constantAttenuation+gl_LightSource[lightIndex].linearAttenuation*dist+gl_LightSource[lightIndex].quadraticAttenuation*dist*dist);diffuse=gl_FrontMaterial.diffuse*gl_LightSource[lightIndex].diffuse*texture2DRect(tex,gl_TexCoord[0].st);ambient=gl_FrontMaterial.ambient*gl_LightSource[lightIndex].ambient*texture2DRect(tex,gl_TexCoord[0].st);spotLightColor+=att*(diffuse*intensity+ambient);halfVector=normalize(lightDir-vec3(eyeSpaceVertexPos));NdotHV=max(dot(normal,halfVector),0.0);specular=pow(NdotHV,gl_FrontMaterial.shininess)*gl_FrontMaterial.specular*gl_LightSource[lightIndex].specular;spotLightColor+=att*specular;}}return spotLightColor;}vec4 calc_lighting_color(in vec3 normal){vec4 lightingColor=vec4(0.0);for(int i=0;i<8;i++){if(gl_LightSource[i].position.w==0.0){lightingColor+=directional_light(i,normal);}else{if(gl_LightSource[i].spotCutoff<=90.0){lightingColor+=spot_light(i,normal);}else{lightingColor+=point_light(i,normal);}}}return lightingColor;}void main(){vec3 n;vec4 color=ambientGlobal;n=normalize(vertex_normal);color+=calc_lighting_color(n);color.w=1.0;gl_FragColor=color;}"
};

const char * LightingShader::FRAGMENT_SHADER_SOURCES_GLSL330[SHADERS_TYPES] = {
    // Gouraud shading Phong pixel shader (no texture)
    "#version 330\n\
in vec4 ambientGlobal,diffuse,ambient,specular;out vec4 fragColor;void main(void){fragColor=(ambientGlobal+diffuse+ambient)+specular;}",
    // Gouraud shading Phong pixel shader (with texture)
    "#version 330\n\
uniform sampler2DRect tex;in vec4 ambientGlobal,diffuse,ambient,specular;in vec2 varyingtexcoord;out vec4 fragColor;void main(void){fragColor=(texture(tex,varyingtexcoord)*(ambientGlobal+diffuse+ambient))+specular;}",
    // Gouraud shading Blinn-Phong pixel shader (no texture)
    "#version 330\n\
in vec4 ambientGlobal,diffuse,ambient,specular;out vec4 fragColor;void main(void){fragColor=(ambientGlobal+diffuse+ambient)+specular;}",
    // Gouraud shading Blinn-Phong pixel shader (with texture)
    "#version 330\n\
uniform sampler2DRect tex;in vec4 ambientGlobal,diffuse,ambient,specular;in vec2 varyingtexcoord;out vec4 fragColor;void main(void){fragColor=(texture(tex,varyingtexcoord)*(ambientGlobal+diffuse+ambient))+specular;}",
    // Phong shading Phong pixel shader (no texture)
    "#version 330\n\
struct Light{vec4 position;vec4 ambient;vec4 diffuse;vec4 specular;float constant_attenuation;float linear_attenuation;float quadratic_attenuation;vec3 spot_direction;float spot_cutoff;float spot_cos_cutoff;float spot_exponent;};uniform Lights{Light light[8];}lights;uniform Material{vec4 ambient;vec4 diffuse;vec4 specular;vec4 emission;float shininess;}material;uniform mat4 modelViewProjectionMatrix;uniform mat4 modelViewMatrix;uniform mat4 normalMatrix;uniform int lightsNumber;in vec4 eyeSpaceVertexPos,ambientGlobal;in vec3 vertex_normal;out vec4 fragColor;vec4 directional_light(in int lightIndex,in vec3 normal){vec4 outputColor=vec4(0.0);vec3 lightDir;vec4 diffuse,ambient,specular=vec4(0.0);float intensity;lightDir=normalize(lights.light[lightIndex].position.xyz);ambient=material.ambient*lights.light[lightIndex].ambient;outputColor=ambient;intensity=max(dot(normal,lightDir),0.0);if(intensity>0.0){vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);diffuse=lights.light[lightIndex].diffuse*material.diffuse;outputColor+=diffuse*intensity;reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular=pow(max(dot(reflection,eyeVector),0.0),material.shininess)*material.specular*lights.light[lightIndex].specular;outputColor+=specular;}outputColor.w=1.0;return outputColor;}vec4 point_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 pointLightColor;float intensity,dist;pointLightColor=vec4(0.0);lightDir=vec3(lights.light[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float att;vec4 diffuse,specular,ambient=vec4(0.0);vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);att=1.0/(lights.light[lightIndex].constant_attenuation+lights.light[lightIndex].linear_attenuation*dist+lights.light[lightIndex].quadratic_attenuation*dist*dist);diffuse=material.diffuse*lights.light[lightIndex].diffuse;ambient=material.ambient*lights.light[lightIndex].ambient;pointLightColor+=att*(diffuse*intensity+ambient);reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular=pow(max(dot(reflection,eyeVector),0.0),material.shininess)*material.specular*lights.light[lightIndex].specular;pointLightColor+=att*specular;}return pointLightColor;}vec4 spot_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 spotLightColor;float intensity,dist;spotLightColor=vec4(0.0);lightDir=vec3(lights.light[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float spotEffect,att;vec4 diffuse,specular,ambient=vec4(0.0);vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);spotEffect=dot(normalize(lights.light[lightIndex].spot_direction),normalize(-lightDir));if(spotEffect>lights.light[lightIndex].spot_cos_cutoff){spotEffect=pow(spotEffect,lights.light[lightIndex].spot_exponent);att=spotEffect/(lights.light[lightIndex].constant_attenuation+lights.light[lightIndex].linear_attenuation*dist+lights.light[lightIndex].quadratic_attenuation*dist*dist);diffuse=material.diffuse*lights.light[lightIndex].diffuse;ambient=material.ambient*lights.light[lightIndex].ambient;spotLightColor+=att*(diffuse*intensity+ambient);reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular=pow(max(dot(reflection,eyeVector),0.0),material.shininess)*material.specular*lights.light[lightIndex].specular;spotLightColor+=att*specular;}}return spotLightColor;}vec4 calc_lighting_color(in vec3 normal){vec4 lightingColor=vec4(0.0);for(int i=0;i<lightsNumber;i++){if(lights.light[i].position.w==0.0){lightingColor+=directional_light(i,normal);}else{if(lights.light[i].spot_cutoff<=90.0){lightingColor+=spot_light(i,normal);}else{lightingColor+=point_light(i,normal);}}}return lightingColor;}void main(){vec3 n;fragColor=ambientGlobal;n=normalize(vertex_normal);fragColor+=calc_lighting_color(n);fragColor.w=1.0;}",
    // Phong shading Phong pixel shader (with texture)
    "#version 330\n\
struct Light{vec4 position;vec4 ambient;vec4 diffuse;vec4 specular;float constant_attenuation;float linear_attenuation;float quadratic_attenuation;vec3 spot_direction;float spot_cutoff;float spot_cos_cutoff;float spot_exponent;};uniform Lights{Light light[8];}lights;uniform Material{vec4 ambient;vec4 diffuse;vec4 specular;vec4 emission;float shininess;}material;uniform mat4 modelViewProjectionMatrix;uniform mat4 modelViewMatrix;uniform mat4 normalMatrix;uniform sampler2DRect tex;uniform int lightsNumber;in vec2 varyingtexcoord;in vec4 eyeSpaceVertexPos,ambientGlobal;in vec3 vertex_normal;out vec4 fragColor;vec4 directional_light(in int lightIndex,in vec3 normal){vec4 outputColor=vec4(0.0);vec3 lightDir;vec4 diffuse,ambient,specular=vec4(0.0);float intensity;lightDir=normalize(lights.light[lightIndex].position.xyz);ambient=material.ambient*lights.light[lightIndex].ambient*texture(tex,varyingtexcoord);outputColor=ambient;intensity=max(dot(normal,lightDir),0.0);if(intensity>0.0){vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);diffuse=lights.light[lightIndex].diffuse*material.diffuse;outputColor+=diffuse*intensity*texture(tex,varyingtexcoord);reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular=pow(max(dot(reflection,eyeVector),0.0),material.shininess)*material.specular*lights.light[lightIndex].specular;outputColor+=specular;}outputColor.w=1.0;return outputColor;}vec4 point_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 pointLightColor;float intensity,dist;pointLightColor=vec4(0.0);lightDir=vec3(lights.light[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float att;vec4 diffuse,specular,ambient=vec4(0.0);vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);att=1.0/(lights.light[lightIndex].constant_attenuation+lights.light[lightIndex].linear_attenuation*dist+lights.light[lightIndex].quadratic_attenuation*dist*dist);diffuse=material.diffuse*lights.light[lightIndex].diffuse*texture(tex,varyingtexcoord);ambient=material.ambient*lights.light[lightIndex].ambient*texture(tex,varyingtexcoord);pointLightColor+=att*(diffuse*intensity+ambient);reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular=pow(max(dot(reflection,eyeVector),0.0),material.shininess)*material.specular*lights.light[lightIndex].specular;pointLightColor+=att*specular;}return pointLightColor;}vec4 spot_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 spotLightColor;float intensity,dist;spotLightColor=vec4(0.0);lightDir=vec3(lights.light[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float spotEffect,att;vec4 diffuse,specular,ambient=vec4(0.0);vec3 reflection;vec3 eyeSpaceVertexPos_n=normalize(vec3(eyeSpaceVertexPos));vec3 eyeVector=normalize(-eyeSpaceVertexPos_n);spotEffect=dot(normalize(lights.light[lightIndex].spot_direction),normalize(-lightDir));if(spotEffect>lights.light[lightIndex].spot_cos_cutoff){spotEffect=pow(spotEffect,lights.light[lightIndex].spot_exponent);att=spotEffect/(lights.light[lightIndex].constant_attenuation+lights.light[lightIndex].linear_attenuation*dist+lights.light[lightIndex].quadratic_attenuation*dist*dist);diffuse=material.diffuse*lights.light[lightIndex].diffuse*texture(tex,varyingtexcoord);ambient=material.ambient*lights.light[lightIndex].ambient*texture(tex,varyingtexcoord);spotLightColor+=att*(diffuse*intensity+ambient);reflection=normalize((2.0*dot(lightDir,normal)*normal)-lightDir);specular=pow(max(dot(reflection,eyeVector),0.0),material.shininess)*material.specular*lights.light[lightIndex].specular;spotLightColor+=att*specular;}}return spotLightColor;}vec4 calc_lighting_color(in vec3 normal){vec4 lightingColor=vec4(0.0);for(int i=0;i<lightsNumber;i++){if(lights.light[i].position.w==0.0){lightingColor+=directional_light(i,normal);}else{if(lights.light[i].spot_cutoff<=90.0){lightingColor+=spot_light(i,normal);}else{lightingColor+=point_light(i,normal);}}}return lightingColor;}void main(){vec3 n;fragColor=ambientGlobal*texture(tex,varyingtexcoord);n=normalize(vertex_normal);fragColor+=calc_lighting_color(n);fragColor.w=1.0;}",
    // Phong shading Blinn-Phong pixel shader (no texture)
    "#version 330\n\
struct Light{vec4 position;vec4 ambient;vec4 diffuse;vec4 specular;float constant_attenuation;float linear_attenuation;float quadratic_attenuation;vec3 spot_direction;float spot_cutoff;float spot_cos_cutoff;float spot_exponent;};uniform Lights{Light light[8];}lights;uniform Material{vec4 ambient;vec4 diffuse;vec4 specular;vec4 emission;float shininess;}material;uniform mat4 modelViewProjectionMatrix;uniform mat4 modelViewMatrix;uniform mat4 normalMatrix;uniform int lightsNumber;in vec4 position;in vec4 eyeSpaceVertexPos,ambientGlobal;in vec3 vertex_normal,interp_eyePos;out vec4 fragColor;vec4 directional_light(in int lightIndex,in vec3 normal){vec4 outputColor=vec4(0.0);vec3 eyeVector,lightDir;vec4 diffuse,ambient,globalAmbient,specular=vec4(0.0);float intensity;eyeVector=normalize(interp_eyePos);lightDir=normalize(lights.light[lightIndex].position.xyz);ambient=material.ambient*lights.light[lightIndex].ambient;outputColor+=ambient;intensity=max(dot(normal,lightDir),0.0);if(intensity>0.0){vec3 halfVector;float NdotHV;diffuse=lights.light[lightIndex].diffuse*material.diffuse;outputColor+=diffuse*intensity;halfVector=normalize(lightDir+eyeVector);NdotHV=max(dot(normal,halfVector),0.0);specular=pow(NdotHV,material.shininess)*material.specular*lights.light[lightIndex].specular;outputColor+=specular;}outputColor.w=1.0;return outputColor;}vec4 point_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 pointLightColor;float intensity,dist;pointLightColor=vec4(0.0);lightDir=vec3(lights.light[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float att,NdotHV;vec4 diffuse,specular,ambient=vec4(0.0);vec3 halfVector;att=1.0/(lights.light[lightIndex].constant_attenuation+lights.light[lightIndex].linear_attenuation*dist+lights.light[lightIndex].quadratic_attenuation*dist*dist);diffuse=material.diffuse*lights.light[lightIndex].diffuse;ambient=material.ambient*lights.light[lightIndex].ambient;pointLightColor+=att*(diffuse*intensity+ambient);halfVector=normalize(lightDir-vec3(eyeSpaceVertexPos));NdotHV=max(dot(normal,halfVector),0.0);specular=pow(NdotHV,material.shininess)*material.specular*lights.light[lightIndex].specular;pointLightColor+=att*specular;}return pointLightColor;}vec4 spot_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 spotLightColor;float intensity,dist;spotLightColor=vec4(0.0);lightDir=vec3(lights.light[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float spotEffect,att,NdotHV;vec4 diffuse,specular,ambient=vec4(0.0);vec3 halfVector;spotEffect=dot(normalize(lights.light[lightIndex].spot_direction),normalize(-lightDir));if(spotEffect>lights.light[lightIndex].spot_cos_cutoff){spotEffect=pow(spotEffect,lights.light[lightIndex].spot_exponent);att=spotEffect/(lights.light[lightIndex].constant_attenuation+lights.light[lightIndex].linear_attenuation*dist+lights.light[lightIndex].quadratic_attenuation*dist*dist);diffuse=material.diffuse*lights.light[lightIndex].diffuse;ambient=material.ambient*lights.light[lightIndex].ambient;spotLightColor+=att*(diffuse*intensity+ambient);halfVector=normalize(lightDir-vec3(eyeSpaceVertexPos));NdotHV=max(dot(normal,halfVector),0.0);specular=pow(NdotHV,material.shininess)*material.specular*lights.light[lightIndex].specular;spotLightColor+=att*specular;}}return spotLightColor;}vec4 calc_lighting_color(in vec3 normal){vec4 lightingColor=vec4(0.0);for(int i=0;i<lightsNumber;i++){if(lights.light[i].position.w==0.0){lightingColor+=directional_light(i,normal);}else{if(lights.light[i].spot_cutoff<=90.0){lightingColor+=spot_light(i,normal);}else{lightingColor+=point_light(i,normal);}}}return lightingColor;}void main(){vec3 n;fragColor=ambientGlobal;n=normalize(vertex_normal);fragColor+=calc_lighting_color(n);fragColor.w=1.0;}",
    // Phong shading Blinn-Phong pixel shader (with texture)
    "#version 330\n\
struct Light{vec4 position;vec4 ambient;vec4 diffuse;vec4 specular;float constant_attenuation;float linear_attenuation;float quadratic_attenuation;vec3 spot_direction;float spot_cutoff;float spot_cos_cutoff;float spot_exponent;};uniform Lights{Light light[8];}lights;uniform Material{vec4 ambient;vec4 diffuse;vec4 specular;vec4 emission;float shininess;}material;uniform mat4 modelViewProjectionMatrix;uniform mat4 modelViewMatrix;uniform mat4 normalMatrix;uniform sampler2DRect tex;uniform int lightsNumber;in vec2 varyingtexcoord;in vec4 eyeSpaceVertexPos,ambientGlobal;in vec3 vertex_normal,interp_eyePos;out vec4 fragColor;vec4 directional_light(in int lightIndex,in vec3 normal){vec4 outputColor=vec4(0.0);vec3 eyeVector,lightDir;vec4 diffuse,ambient,globalAmbient,specular=vec4(0.0);float intensity;eyeVector=normalize(interp_eyePos);lightDir=normalize(lights.light[lightIndex].position.xyz);ambient=material.ambient*lights.light[lightIndex].ambient*texture(tex,varyingtexcoord);outputColor+=ambient;intensity=max(dot(normal,lightDir),0.0);if(intensity>0.0){vec3 halfVector;float NdotHV;diffuse=lights.light[lightIndex].diffuse*material.diffuse;outputColor+=diffuse*intensity*texture(tex,varyingtexcoord);halfVector=normalize(lightDir+eyeVector);NdotHV=max(dot(normal,halfVector),0.0);specular=pow(NdotHV,material.shininess)*material.specular*lights.light[lightIndex].specular;outputColor+=specular;}outputColor.w=1.0;return outputColor;}vec4 point_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 pointLightColor;float intensity,dist;pointLightColor=vec4(0.0);lightDir=vec3(lights.light[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float att,NdotHV;vec4 diffuse,specular,ambient=vec4(0.0);vec3 halfVector;att=1.0/(lights.light[lightIndex].constant_attenuation+lights.light[lightIndex].linear_attenuation*dist+lights.light[lightIndex].quadratic_attenuation*dist*dist);diffuse=material.diffuse*lights.light[lightIndex].diffuse*texture(tex,varyingtexcoord);ambient=material.ambient*lights.light[lightIndex].ambient*texture(tex,varyingtexcoord);pointLightColor+=att*(diffuse*intensity+ambient);halfVector=normalize(lightDir-vec3(eyeSpaceVertexPos));NdotHV=max(dot(normal,halfVector),0.0);specular=pow(NdotHV,material.shininess)*material.specular*lights.light[lightIndex].specular;pointLightColor+=att*specular;}return pointLightColor;}vec4 spot_light(in int lightIndex,in vec3 normal){vec3 lightDir;vec4 spotLightColor;float intensity,dist;spotLightColor=vec4(0.0);lightDir=vec3(lights.light[lightIndex].position-eyeSpaceVertexPos);dist=length(lightDir);intensity=max(dot(normal,normalize(lightDir)),0.0);if(intensity>0.0){float spotEffect,att,NdotHV;vec4 diffuse,specular,ambient=vec4(0.0);vec3 halfVector;spotEffect=dot(normalize(lights.light[lightIndex].spot_direction),normalize(-lightDir));if(spotEffect>lights.light[lightIndex].spot_cos_cutoff){spotEffect=pow(spotEffect,lights.light[lightIndex].spot_exponent);att=spotEffect/(lights.light[lightIndex].constant_attenuation+lights.light[lightIndex].linear_attenuation*dist+lights.light[lightIndex].quadratic_attenuation*dist*dist);diffuse=material.diffuse*lights.light[lightIndex].diffuse*texture(tex,varyingtexcoord);ambient=material.ambient*lights.light[lightIndex].ambient*texture(tex,varyingtexcoord);spotLightColor+=att*(diffuse*intensity+ambient);halfVector=normalize(lightDir-vec3(eyeSpaceVertexPos));NdotHV=max(dot(normal,halfVector),0.0);specular=pow(NdotHV,material.shininess)*material.specular*lights.light[lightIndex].specular;spotLightColor+=att*specular;}}return spotLightColor;}vec4 calc_lighting_color(in vec3 normal){vec4 lightingColor=vec4(0.0);for(int i=0;i<lightsNumber;i++){if(lights.light[i].position.w==0.0){lightingColor+=directional_light(i,normal);}else{if(lights.light[i].spot_cutoff<=90.0){lightingColor+=spot_light(i,normal);}else{lightingColor+=point_light(i,normal);}}}return lightingColor;}void main(){vec3 n;fragColor=ambientGlobal*texture(tex,varyingtexcoord);n=normalize(vertex_normal);fragColor+=calc_lighting_color(n);fragColor.w=1.0;}"

};


}

}
